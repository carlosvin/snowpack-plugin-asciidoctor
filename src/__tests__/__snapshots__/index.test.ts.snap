// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snowpack-plugin-asciidoctor should compile .adoc files: html 1`] = `
"<div class=\\"paragraph\\">
<p>It’s fair to say that React 16.8 and the introduction of
<a href=\\"https://reactjs.org/docs/hooks-intro.html\\">hooks</a> has really changed how
we write React. Hooks are one of those APIs that make you realise the
flaws of the previous approach <em>after</em> you stop using it. I remember
being very skeptical of hooks when they were first released, not
thinking that the previous class based design had many flaws, but I’ve
since come to realise I was very wrong, and hooks are a vast improvement
on how we build React components. If you’re interested in comparing the
old vs the new, I wrote a <a href=\\"/refactoring-to-react-hooks/\\">blog post
refactoring a component to use hooks</a> that offers a nice comparison.</p>
</div>
<div class=\\"listingblock\\">
<div class=\\"content\\">
<pre class=\\"highlight\\"><code class=\\"language-py\\" data-lang=\\"py\\"><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">main</span><span class=\\"hljs-params\\">()</span>:</span>
    <span class=\\"hljs-keyword\\">pass</span></code></pre>
</div>
</div>
<div class=\\"admonitionblock warning\\">
<table>
<tr>
<td class=\\"icon\\">
<div class=\\"title\\">Warning</div>
</td>
<td class=\\"content\\">
Wolpertingers are known to nest in server racks.
Enter at your own risk.
</td>
</tr>
</table>
</div>
<div class=\\"listingblock\\">
<div class=\\"title\\">void main</div>
<div class=\\"content\\">
<pre class=\\"highlight\\"><code class=\\"language-cpp\\" data-lang=\\"cpp\\"><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">int</span> <span class=\\"hljs-title\\">main</span> <span class=\\"hljs-params\\">()</span> </span>{
    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>;
}</code></pre>
</div>
</div>
<div class=\\"listingblock\\">
<div class=\\"title\\">bash file include</div>
<div class=\\"content\\">
<pre class=\\"highlight\\"><code class=\\"language-bash\\" data-lang=\\"bash\\">FILES=*.md
<span class=\\"hljs-keyword\\">for</span> f <span class=\\"hljs-keyword\\">in</span> <span class=\\"hljs-variable\\">$FILES</span>
<span class=\\"hljs-keyword\\">do</span>
  filename=<span class=\\"hljs-string\\">\\"<span class=\\"hljs-variable\\">\${f%.*}</span>\\"</span>
  <span class=\\"hljs-built_in\\">echo</span> <span class=\\"hljs-string\\">\\"Converting <span class=\\"hljs-variable\\">$f</span> to <span class=\\"hljs-variable\\">$filename</span>.adoc\\"</span>
  \`pandoc <span class=\\"hljs-variable\\">$f</span> -f markdown -t asciidoctor -o <span class=\\"hljs-variable\\">$filename</span>.adoc\`
<span class=\\"hljs-keyword\\">done</span></code></pre>
</div>
</div>"
`;

exports[`snowpack-plugin-asciidoctor should include files: include 1`] = `
"<div class=\\"paragraph\\">
<p>It’s fair to say that React 16.8 and the introduction of
<a href=\\"https://reactjs.org/docs/hooks-intro.html\\">hooks</a> has really changed how
we write React. Hooks are one of those APIs that make you realise the
flaws of the previous approach <em>after</em> you stop using it. I remember
being very skeptical of hooks when they were first released, not
thinking that the previous class based design had many flaws, but I’ve
since come to realise I was very wrong, and hooks are a vast improvement
on how we build React components. If you’re interested in comparing the
old vs the new, I wrote a <a href=\\"/refactoring-to-react-hooks/\\">blog post
refactoring a component to use hooks</a> that offers a nice comparison.</p>
</div>
<div class=\\"listingblock\\">
<div class=\\"content\\">
<pre class=\\"highlight\\"><code class=\\"language-py\\" data-lang=\\"py\\">def main():
    pass</code></pre>
</div>
</div>
<div class=\\"admonitionblock warning\\">
<table>
<tr>
<td class=\\"icon\\">
<div class=\\"title\\">Warning</div>
</td>
<td class=\\"content\\">
Wolpertingers are known to nest in server racks.
Enter at your own risk.
</td>
</tr>
</table>
</div>
<div class=\\"listingblock\\">
<div class=\\"title\\">void main</div>
<div class=\\"content\\">
<pre class=\\"highlight\\"><code class=\\"language-cpp\\" data-lang=\\"cpp\\">int main () {
    return 0;
}</code></pre>
</div>
</div>
<div class=\\"listingblock\\">
<div class=\\"title\\">bash file include</div>
<div class=\\"content\\">
<pre class=\\"highlight\\"><code class=\\"language-bash\\" data-lang=\\"bash\\">FILES=*.md
for f in $FILES
do
  filename=\\"\${f%.*}\\"
  echo \\"Converting $f to $filename.adoc\\"
  \`pandoc $f -f markdown -t asciidoctor -o $filename.adoc\`
done</code></pre>
</div>
</div>"
`;
